{
  "language": "Solidity",
  "sources": {
    "contracts/Impl/StandardImpl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ncontract StandardImpl {\n    uint256 public constant VERSION = 3;\n    // uint256 public constant VERSION = 2;\n\n    bool public initialized;\n\n    uint256 public value;\n\n    modifier initializer() {\n        require(!initialized, \"Only initialize once\");\n        _;\n        initialized = true;\n    }\n\n    function initialize(uint256 _initValue) public initializer {\n        value = _initValue;\n    }\n\n    function setValue(uint256 _newValue) public {\n        value = _newValue + 10;\n    }\n}\n"
    },
    "contracts/Impl/StandardImplv2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ncontract StandardImplv2 {\n    uint256 public constant VERSION = 4;\n    // uint256 public constant VERSION = 2;\n\n    bool public initialized;\n\n    uint256 public value;\n    mapping(address => uint256) name;\n\n    modifier initializer() {\n        require(!initialized, \"Only initialize once\");\n        _;\n        initialized = true;\n    }\n\n    function initialize(uint256 _initValue) public initializer {\n        value = _initValue;\n    }\n\n    function setValue(uint256 _newValue) public {\n        value = _newValue * 3;\n        name[msg.sender] = value;\n    }\n\n    function getValueByAddress(address user) external view returns (uint256) {\n        return name[user];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}